name: POSIX

on:
  pull_request:
  push:
    branches:
      - master
      - develop
      - feature/**

env:
  UBSAN_OPTIONS: print_stacktrace=1
  B2_VARIANT: debug,release
  B2_LINK: shared,static

jobs:
  CI:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { compiler: g++-4.4,        cxxstd: '98,0x',                         os: ubuntu-16.04, install: yes }
          - { compiler: g++-5,          cxxstd: '03,11,14',                      os: ubuntu-16.04, install: yes }
          - { compiler: g++-6,          cxxstd: '03,11,14,17',                   os: ubuntu-16.04, install: yes }
          - { compiler: g++-7,          cxxstd: '03,11,14,17',                   os: ubuntu-20.04, install: yes }
          - { compiler: g++-8,          cxxstd: '03,11,14,17,2a',                os: ubuntu-20.04, install: yes }
          - { compiler: g++-9,          cxxstd: '03,11,14,17,2a',                os: ubuntu-20.04, install: yes }
          - { compiler: g++-10,         cxxstd: '03,11,14,17,2a', sanitize: yes, os: ubuntu-20.04, install: yes, linkflags: -fuse-ld=gold }
          - { compiler: clang++-3.5,    cxxstd: '03,11',                         os: ubuntu-16.04, install: yes }
          - { compiler: clang++-6.0,    cxxstd: '03,11',                         os: ubuntu-16.04, install: yes }
          - { compiler: clang++-7,      cxxstd: '03,11',                         os: ubuntu-18.04, install: yes }
          - { compiler: clang++-8,      cxxstd: '03,11,14',                      os: ubuntu-18.04, install: yes }
          - { compiler: clang++-9,      cxxstd: '03,11,14',                      os: ubuntu-18.04, install: yes }
          - { compiler: clang++-10,     cxxstd: '03,11,14,17,2a', sanitize: yes, os: ubuntu-20.04, install: yes }
          - { compiler: clang++-libc++, cxxstd: '03,11,14',                      os: ubuntu-18.04, install: 'libc++-dev libc++-helpers' }
          - { compiler: clang++,        cxxstd: '03,11,14,1z',    sanitize: yes, os: macos-10.15 }
          # Codecov
          - { compiler: g++-8,          cxxstd: '03,11',          coverage: yes, os: ubuntu-20.04, install: yes }

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v2
        if: '!matrix.coverage'
      - uses: actions/checkout@v2
        if: 'matrix.coverage'
        with:
          fetch-depth: 0

      - name: Install packages
        if: matrix.install
        run: |
          if [[ "${{matrix.install}}" == "yes" ]]; then
            pkgs="${{matrix.compiler}}"
            pkgs="${pkgs/clang++-/clang-}"
          else
            pkgs="${{matrix.install}}"
          fi
          sudo apt install $pkgs

      - name: Setup config vars
        run: |
          echo "LIBRARY=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "B2_COMPILER=${{matrix.compiler}}" >> $GITHUB_ENV
          ${{matrix.compiler}} --version
          if [[ "${{matrix.compiler}}" =~ clang ]]; then
              B2_TOOLSET=clang
          elif [[ "${{matrix.compiler}}" =~ g\+\+ ]]; then
              B2_TOOLSET=gcc
          else
              echo "Unknown compiler: ${{matrix.compiler}}" >&2
              false
          fi
          echo "using $B2_TOOLSET : : ${{matrix.compiler}} ;" > ~/user-config.jam
          echo "B2_TOOLSET=$B2_TOOLSET" >> $GITHUB_ENV
          echo "B2_CXXSTD=${{matrix.cxxstd}}" >> $GITHUB_ENV
          if [[ "${{matrix.sanitize}}" == "yes" ]]; then
            echo "B2_ASAN=address-sanitizer=norecover" >> $GITHUB_ENV
            echo "B2_UBSAN=undefined-sanitizer=norecover" >> $GITHUB_ENV
          fi
          [[ "${{matrix.linkflags}}" == "" ]] || echo "B2_LINKFLAGS=linkflags=${{matrix.linkflags}}" >> $GITHUB_ENV

      - name: Setup Boost
        run: |
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          cd ..
          git clone -b $BOOST_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          echo "BOOST_ROOT=$PWD" >> $GITHUB_ENV
          cp -r $GITHUB_WORKSPACE/* libs/$LIBRARY
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" $LIBRARY
          ./bootstrap.sh
          ./b2 headers

      - name: Setup coverage
        if: matrix.coverage
        run: .github/codecov.sh setup

      - name: Run tests
        working-directory: ${{env.BOOST_ROOT}}
        run: ./b2 -j3 libs/$LIBRARY/test toolset=$B2_TOOLSET cxxstd=$B2_CXXSTD variant=$B2_VARIANT link=$B2_LINK $B2_ASAN $B2_UBSAN $B2_LINKFLAGS $B2_FLAGS

      - name: Collect coverage
        if: matrix.coverage
        run: ${{github.workspace}}/.github/codecov.sh collect
