#pragma once
#pragma warning( push )  
#pragma warning(disable : 4996)
#pragma warning(disable : 4005)

//Windows 7 target

#if 0
#define VC_EXTRALEAN        // Exclude rarely-used stuff from Windows headers
#include <afxwin.h>//This will include windows.h because
#include <afxeNOWINSTYLESxt.h> // MFC extensions
#else
#define WIN32_LEAN_AND_MEAN
#define VC_EXTRALEAN
//#define NOGDICAPMASKS (Need CP, for example CP_THREAD_ACP)
//#define NOVIRTUALKEYCODES (cimg needs this)
//#define NOWINMESSAGES (WM_QUIT)
//#define NOWINSTYLES (cimg)
#define NOMENUS
//#define NOICONS IDI_APPLICATION
#define NOKEYSTATES
#define NOSYSCOMMANDS
#define NORASTEROPS
//#define NOSHOWWINDOW (cimg)
#define NOEMRESOURCE
#define NOATOM
#define NOCLIPBOARD
#define NOCOLOR
//#define NOCTLMGR Also from cimg (sad)
#define NODRAWTEXT
//#define NOGDI
#define NOKERNEL
//#define NOUSER (MessageBox is in user ??)
// #define NONLS (MultiByteToWideChar function)
//#define NOMB (we actually used message box)
#define NOMEMMGR
#define NOMETAFILE
#define NOMINMAX
//#define NOMSG (we actually used message box)
#define NOOPENFILE
#define NOSCROLL
#define NOSERVICE
#define NOSOUND
//#define NOTEXTMETRIC (apparently need this, for example LPTEXTMETRICA)
#define NOCOMM
#define NOKANJI
#define NOHELP
#define NOPROFILER
#define NODEFERWINDOWPOS
#define NOMCX

#include <Windows.h>
#endif
#undef NOMINMAX
//
//
#include "slim_structs.h"

#define HIDE_LIVE_PARAMETERS (1)	//live segmentation (1 = disabled)									  
#define HIDE_AUTOMATED_SCANNING 0   //1 = Hide it

#include "windows_sleep.h"
#include "chrono_converters.h"
#include "ml_shared.h"			//control + click to get to this file  //has the ML Build Option
							
#define SLM_TYPE_VIRTUAL 1
#define SLM_TYPE_BNS 2
#define SLM_TYPE_BNS_ANCIENT 3
#define SLM_TYPE_MONITOR 4
#define SLM_TYPE_THORLABSCOM 5
#define SLM_TYPE_ARDUINOCOM 6
#define SLM_TYPE_MEADOWLARK_RETARDER 7
#define SLM_TYPE_THORLABS_EOM 8

#define BODY_TYPE_VIRTUAL 1
#define BODY_TYPE_ZEISS 2
#define BODY_TYPE_NIKON 3
#define BODY_TYPE_LEICA 4
#define BODY_TYPE_ASI 5
#define BODY_TYPE_NIKON2 6
#define BODY_TYPE_PI_Z 7

#define STAGE_TYPE_VIRTUAL 1
#define STAGE_TYPE_ZEISS 2
#define STAGE_TYPE_NIKON 3
#define STAGE_TYPE_LEICA 4
#define STAGE_TYPE_ASI 5
#define STAGE_TYPE_NIKON2 6

#define CAMERA_NOT_PRESENT 0
#define CAMERA_PRESENT 1
#define CAMERA_PRESENT_VIRTUAL_PSI CAMERA_NOT_PRESENT
#define CAMERA_PRESENT_ANDOR CAMERA_NOT_PRESENT
#define CAMERA_PRESENT_HAMAMATSU CAMERA_NOT_PRESENT
#define CAMERA_PRESENT_ZEISSMR CAMERA_NOT_PRESENT
#define CAMERA_PRESENT_FLYCAPTURE CAMERA_NOT_PRESENT
#define CAMERA_PRESENT_SPINRAKER CAMERA_NOT_PRESENT
#define CAMERA_PRESENT_BSI CAMERA_NOT_PRESENT



#define KILL_CONDENSER_NAC_CONTROL 0		// 1 = disabled 
#define KILL_PORT_SWITCHER 0				// 1 = disabled 
#define HIDE_LIGHT_PATH_WIDGET (~(KILL_CONDENSER_NAC_CONTROL &&  KILL_PORT_SWITCHER))

#define INCLUDE_CAMERA 1
#define INCLUDE_SLIM 1
#define INCLUDE_HRSLIM 1
#define INCLUDE_GLIM 1
#define INCLUDE_IGLIM 1
#define INCLUDE_CUSTOM 1

#define INCLUDE_POL_PSI 0
#define INCLUDE_POL_DPM 1
#define INCLUDE_DPM 1
#define INCLUDE_POL 0

<<<<<<< HEAD
#if	1 //virtual virtual virtual virtual (prompt)
=======
#if	1 //virtual virtual virtual virtual 2 cameras (prompt)
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_VIRTUAL_PSI CAMERA_PRESENT
#define EXTRA_VIRTUAL_CAMERA
#endif

#if 0 //virtual virtual virtual virtual (prompt)
#define SLM_TYPE SLM_TYPE_MONITOR
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_VIRTUAL_PSI CAMERA_PRESENT
#endif

#if 0 //virtual virtual virtual BSI (prompt)
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_BSI CAMERA_PRESENT
#endif

#if 0 //Thorlabs Zeiss Zeiss Spinraker (MicroPolarizer)
#define SLM_TYPE SLM_TYPE_THORLABSCOM
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_SPINRAKER CAMERA_PRESENT
#endif

#if 0 //virtual PI virtual virtual (prompt)/DPM
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_PI_Z
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_VIRTUAL_PSI CAMERA_PRESENT
#endif

#if 0 //BNS NIKON2 NIKON2 HAMAMATSU (POLITO)
#define SLM_TYPE SLM_TYPE_BNS
#define BODY_TYPE BODY_TYPE_NIKON2
#define STAGE_TYPE STAGE_TYPE_NIKON2
#define CAMERA_PRESENT_HAMAMATSU CAMERA_PRESENT
#endif

#if 0 //virtual ZEISS ZEISS virtual (prompt)
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_VIRTUAL_PSI CAMERA_PRESENT
#endif

#if 0 //virtual virtual virtual virtual (DPM)
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_VIRTUAL_PSI CAMERA_PRESENT
#endif

#if 0 //BNS ZEISS ZEISS ANDOR/ZEISS (Beckman)
#define SLM_TYPE SLM_TYPE_BNS
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
#define CAMERA_PRESENT_ZEISSMR CAMERA_PRESENT
#endif

#if 0 //Virtual ASI ASI FLYCAPTURE (Olympus DPM UIUC)
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_ASI
#define STAGE_TYPE STAGE_TYPE_ASI
#define CAMERA_PRESENT_FLYCAPTURE CAMERA_PRESENT
#endif

#if 0 //VIRTUAL ZEISS ZEISS ANDOR (DPM)
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
#endif

<<<<<<< HEAD
#if 0 //BNS LEICA LEICA HAMAMATSU/FLYCAPTURE (PHI OPTICS - Leica)
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE BODY_TYPE_VIRTUAL
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
//#define CAMERA_PRESENT_FLYCAPTURE CAMERA_PRESENT
#endif

#if	0 //virtual LECIA LECIA virtual (prompt)
#define SLM_TYPE SLM_TYPE_VIRTUAL
#define BODY_TYPE BODY_TYPE_LEICA
#define STAGE_TYPE STAGE_TYPE_LEICA
#define CAMERA_PRESENT_VIRTUAL_PSI CAMERA_PRESENT
#define EXTRA_VIRTUAL_CAMERA
#endif

#if 0 //BNS ZEISS ZEISS HAMAMATSU/FLYCAPTURE (PHI OPTICS, Andreas Borked Build)
#define SLM_TYPE SLM_TYPE_BNS
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_HAMAMATSU CAMERA_PRESENT
#define CAMERA_PRESENT_FLYCAPTURE CAMERA_PRESENT
#endif

#if 0 //BNS ZEISS ZEISS HAMAMATSU (PHI OPTICS, BI 3410)
=======
#if 0 //BNS ZEISS ZEISS HAMAMATSU FLYCAP (PHI OPTICS)
>>>>>>> 00a955014633688fa02836434a9d1db5f30d5f1b
#define SLM_TYPE SLM_TYPE_BNS
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_HAMAMATSU CAMERA_PRESENT
#define CAMERA_PRESENT_FLYCAPTURE CAMERA_PRESENT
#endif

#if 0 //BNS VIRTUAL VIRTUAL HAMAMATSU (PHI OPTICS)
#define SLM_TYPE SLM_TYPE_BNS
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_HAMAMATSU CAMERA_PRESENT
#endif

#if 0 //BNS ZEISS ZEISS ANDOR (3436)
#define SLM_TYPE SLM_TYPE_BNS
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
#endif

#if 0 //ANCIENTBNS NIKON NIKON FLYCAPTURE (3436)
#define SLM_TYPE SLM_TYPE_BNS_ANCIENT
#define BODY_TYPE BODY_TYPE_NIKON
#define STAGE_TYPE STAGE_TYPE_NIKON
#define CAMERA_PRESENT_FLYCAPTURE CAMERA_PRESENT
#endif

#if 0 //BNS ZEISS ZEISS FLYCAPTURE (Color 3436)
#define SLM_TYPE SLM_TYPE_BNS
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_FLYCAPTURE CAMERA_PRESENT
#endif

#if 0 //THORLABS ZEISS ZEISS HAMAMATSU/ZEISS (Reflection)
#define SLM_TYPE SLM_TYPE_THORLABSCOM
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_HAMAMATSU CAMERA_PRESENT
#define CAMERA_PRESENT_ZEISSMR CAMERA_PRESENT
#endif

#if 0 //THORLABS ZEISS ZEISS HAMAMATSU (Reflection)
#define SLM_TYPE SLM_TYPE_THORLABSCOM
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_HAMAMATSU CAMERA_PRESENT
#endif

#if 0 //THORLABS ZEISS ZEISS ANDOR (BI 3410, LCVR GLIM)
#define SLM_TYPE SLM_TYPE_THORLABSCOM
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
#endif


#if 0 //THORLABS PI ZEISS ANDOR (Electrophysiology QDIC)
#define SLM_TYPE SLM_TYPE_THORLABSCOM
#define BODY_TYPE BODY_TYPE_PI_Z
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
#define ANDOR_2x2_BIN_MODE_NOPE
#define ANDOR_LOW_NOISE_MODE
#endif

#if 0 //THORLABS ZEISS ZEISS ANDOR (Reflection QDIC /w Arduino)
#define SLM_TYPE SLM_TYPE_ARDUINOCOM
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
#define ANDOR_LOW_NOISE_MODE
#define ANDOR_2x2_BIN_MODE_NOPE
#endif

#if 0 //MEADOWLARK_RETARDER ZEISS ZEISS ZEISS (Reflection QDIC, 3436)
#define SLM_TYPE SLM_TYPE_MEADOWLARK_RETARDER
#define BODY_TYPE BODY_TYPE_ZEISS
#define STAGE_TYPE STAGE_TYPE_ZEISS
#define CAMERA_PRESENT_ZEISSMR CAMERA_PRESENT
#endif

#if 0 //EOM VIRTUAL VIRTUAL Andor (Reflection EOM QDIC, 3436)
#define SLM_TYPE SLM_TYPE_THORLABS_EOM
#define BODY_TYPE BODY_TYPE_VIRTUAL
#define STAGE_TYPE STAGE_TYPE_VIRTUAL
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
#endif

#if 0 //ANCIENTBNS Nikon Nikon HAMAMATSU (Color Nikon)
#define SLM_TYPE SLM_TYPE_BNS_ANCIENT
#define BODY_TYPE BODY_TYPE_NIKON
#define STAGE_TYPE STAGE_TYPE_NIKON
#define CAMERA_PRESENT_FLYCAPTURE CAMERA_PRESENT
#endif

#if 0 //DVI NIKON NIKON Andor (Nikon QDIC)
#define SLM_TYPE SLM_TYPE_MONITOR
#define BODY_TYPE BODY_TYPE_NIKON
#define STAGE_TYPE STAGE_TYPE_NIKON
#define CAMERA_PRESENT_ANDOR CAMERA_PRESENT
#endif


#define IS_NIKON_APARTMENT_BUG (((BODY_TYPE==BODY_TYPE_NIKON) || (STAGE_TYPE==STAGE_TYPE_NIKON)))
#define HAS_LEICA (((BODY_TYPE==BODY_TYPE_LEICA) || (STAGE_TYPE==STAGE_TYPE_LEICA)))

#ifdef _DEBUG 
#define SIMULATE_OVERFLOW (0)
#else
#define SIMULATE_OVERFLOW (0)
#endif

#define BUILD_ALL_DEVICES_TARGETS (0)

#pragma warning( pop )   